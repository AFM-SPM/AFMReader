[build-system]
requires = [
  "setuptools>=45",
  "setuptools_scm[toml]>=6.2",
  "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "AFMReader"
dynamic = ["version"]
authors = [
  { name = "Sylvia Whittle", email = "sylvia.whittle@sheffield.ac.uk" },
  { name = "Neil Shephard", email = "n.shephard@sheffield.ac.uk" },
  {name = "TopoStats Team", email = "topostats@sheffield.ac.uk"}
]
description = "Read and retrieve data from various AFM file formats."
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

keywords = [
  "afm",
  "image processing"
]

dependencies = [
  "matplotlib",
  "igor2",
  "tifffile",
  "pySPM",
  "loguru",
]

[project.optional-dependencies]
dev = [
  "black",
  "pre-commit",
  "pylint",
  "ruff",
  "setuptools_scm[toml]",
  "wheel"
]
pypi = [
  "build",
  "setuptools_scm[toml]",
  "wheel",
]
tests = [
  "pytest",
  "pytest-cov",
]

[project.urls]
"Homepage" = "https://github.com/AFM-SPM/afmreader"
"Bug Tracker" = "https://github.com/AFM-SPM/afmreader/issues"

[tool.setuptools_scm]
write_to = "AFMReader/_version.py"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning"
]

[tool.black]
line-length = 120
target-version = ['py39']
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
  )/
)
'''

[tool.ruff]
exclude = [
  "*.ipynb",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pycache__",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "docs/conf.py",
  "node_modules",
  "pygwytracing.py",
  "tests/tracing/test_dnacurvature.py",
  "tests/tracing/test_dnatracing.py",
  "tests/tracing/test_tracing_dna.py",
  "topostats/plotting.py",
  "topostats/tracing/dnatracing.py",
  "topostats/tracing/tracing_dna.py",
  "topostats/tracing/tracingfuncs.py",
  "venv",
]
# per-file-ignores = []
line-length = 120
target-version = "py310"
lint.select = ["A", "B", "C", "D", "E", "F", "PT", "PTH", "R", "S", "W", "U"]
lint.ignore = [
  "B905",
  "E501",
  "S101",
  "T201"]
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["A", "B", "C", "D", "E", "F", "PT", "PTH", "R", "S", "W", "U"]
lint.unfixable = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true

[tool.coverage.run]
source = ["AFMReader"]
omit = [
  "AFMReader/_version.py",
  "*tests*",
  "**/__init__*",
]

[tool.numpydoc_validation]
checks = [
  "all", # Perform all check except those listed below
  "ES01",
  "EX01",
  "PR10", # Conflicts with black formatting
  "SA01",
]
exclude = [  # don't report on objects that match any of these regex
    "\\.undocumented_method$",
    "\\.__repr__$",
    "^test_",
    "^conftest",
]
override_SS05 = [  # override SS05 to allow docstrings starting with these words
    "^Process ",
    "^Assess ",
    "^Access ",
]
